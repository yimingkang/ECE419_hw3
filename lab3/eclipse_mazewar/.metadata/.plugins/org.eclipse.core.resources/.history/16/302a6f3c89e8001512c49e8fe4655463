import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;

public class NamingServer {
    private static final int MAX_CLIENTS = 4;
    private static Socket[] mSocketList = null; //A list of MSockets
    private static MPacket[] helloPackets = null;

    public static void main(String args[]) throws IOException, ClassNotFoundException{
        int port = Integer.parseInt(args[0]);
        System.out.println("Starting naming server on port " + port);
        int socketBasePort = 8000;
        int nextAssignedPort = 8000;
        
        int clientCount = 0;
        ServerSocket sSocket = new ServerSocket(port);
        ObjectOutputStream writer;

        for (clientCount = 0; clientCount < NamingServer.MAX_CLIENTS; clientCount++){
        	Socket client = sSocket.accept();
        	System.out.println("Client connected! # " + (clientCount + 1));
        	
        	// save the socket for later use
        	mSocketList[clientCount] = client;
        	ObjectInputStream reader = new ObjectInputStream(client.getInputStream());
        	
        	// first read the hello packet
        	MPacket helloPacket = (MPacket) reader.readObject();
        	helloPackets[clientCount] = helloPacket;
        	

        	try{
	        	writer = new ObjectOutputStream(client.getOutputStream());
	        	
	        	// input port
	        	writer.writeObject((Object) nextAssignedPort);
	        	nextAssignedPort++;
	        	
	        	if(clientCount == NamingServer.MAX_CLIENTS - 1){
	        		// last one wraps around, last one is the token holder
	            	writer.writeObject((Object) socketBasePort);
	            	writer.writeObject((Object) 1);
	        	}else{
	            	writer.writeObject((Object) nextAssignedPort);
	            	writer.writeObject((Object) 0);
	        	}
	        	Thread.sleep(5000);
        	} catch (IOException e) {
        		System.out.println("Socket closed");
            } catch (InterruptedException e) {
				e.printStackTrace();
			}
        }
        sSocket.close();
    }
    
    
   public void handleHello(){
        
        //The number of players
        int playerCount = mSocketList.length;
        Random randomGen = null;
        Player[] players = new Player[playerCount];
        MPacket hello = null;
        
        int socketBasePort = 8000;
        int nextAssignedPort = 8000;
        
        try{        
            for(int i=0; i<playerCount; i++){
                hello = helloPackets[playerCount];
                
                //Sanity check 
                if(hello.type != MPacket.HELLO){
                    throw new InvalidObjectException("Expecting HELLO Packet");
                }
                
                if(randomGen == null){
                   randomGen = new Random(hello.mazeSeed); 
                }
                //Get a random location for player
                Point point =
                    new Point(randomGen.nextInt(hello.mazeWidth),
                          randomGen.nextInt(hello.mazeHeight));
                
                //Start them all facing North
                Player player = new Player(hello.name, point, Player.North);
                players[i] = player;
            }
            
            hello.event = MPacket.HELLO_RESP;
            hello.players = players;

            for(Socket client: mSocketList){
            	ObjectOutputStream writer = new ObjectOutputStream(client.getOutputStream());
                writer.writeObject((Object) hello);   
            }
        }catch(InterruptedException e){
            e.printStackTrace();
            Thread.currentThread().interrupt();    
        }catch(IOException e){
            e.printStackTrace();
            Thread.currentThread().interrupt();
        }
    }

}
