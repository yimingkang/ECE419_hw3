import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class SafeSocket {
	public String myName;
	public int inPort;
	
	private BlockingQueue<MPacket> writeBuffer;
	private BlockingQueue<MPacket> readBuffer;
	
	public SafeSocket(String name, int serverPort, boolean tokenHolder) throws IOException{

		this.myName = name;
		this.writeBuffer = new LinkedBlockingQueue<MPacket>();
		this.readBuffer = new LinkedBlockingQueue<MPacket>();
		
		System.out.println("Contacting naming server to get inPort and outPort");
		Socket namingServer = new Socket("localhost", serverPort);
	    BufferedReader reader = new BufferedReader(new InputStreamReader(namingServer.getInputStream()));
	    int inPort = Integer.parseInt(reader.readLine());
	    int outPort = Integer.parseInt(reader.readLine());
	    
	    System.out.println("Naming server returned inPort:" + inPort + ", outPort" + outPort);

		
		System.out.println("Starting SenderThread " + name);
		// have Sender thread connect to socket himself ==> impl retry!
		new Thread(new SafeSocketSenderThread("localhost", outPort, this.writeBuffer, tokenHolder)).start();
		
		
		System.out.println("Starting ListenerThread " + name);
		new Thread(new SafeSocketListenerThread(name, inPort, this.readBuffer)).start();
	}
	
	
	// API confronting to MSocket
	public void writeObject(MPacket packet){
		//System.out.println("writeObject got a packet, writing...");
		this.writeBuffer.add(packet);
	}
	
	// API confronting to MSocket
	public MPacket readObject() throws InterruptedException{
		return this.readBuffer.take();
	}
}
